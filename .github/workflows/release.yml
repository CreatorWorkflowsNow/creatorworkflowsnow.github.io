# name: "Release PDF"
# 
# on:
#   push:
#     branches:
#         - source
# 
# jobs:
#   docker:
#     name: Build container
#     runs-on: ubuntu-latest
#     steps:
#         # https://github.com/actions/checkout
#         - name: "☁️ checkout repository"
#           uses: actions/checkout@v4.0.0
# 
#         # https://github.com/docker/setup-buildx-action
#         - name: "🔧 setup buildx"
#           uses: docker/setup-buildx-action@v3.0.0
# 
#         # https://github.com/actions/cache
#         - name: "🔧 cache docker layers"
#           uses: actions/cache@v3.3.2
#           with:
#                 path: /tmp/.buildx-cache
#                 key: ${{ runner.os }}-buildx-${{ github.sha }}
#                 restore-keys: |
#                     ${{ runner.os }}-buildx-
# 
#         # https://github.com/docker/metadata-action
#         - name: "🔧 docker meta"
#           id: meta
#           uses: docker/metadata-action@v5.0.0
#           with:
#                 images: ${{ github.repository }}
#                 tags: latest
# 
#         # https://github.com/docker/build-push-action
#         - name: "📦 docker build"
#           uses: docker/build-push-action@v5.0.0
#           with:
#                 context: .
#                 tags: ${{ steps.meta.outputs.tags }}
#                 labels: ${{ steps.meta.outputs.labels }}
#                 outputs: type=docker,dest=/tmp/docker.tar
#                 push: false
#                 cache-from: type=gha, scope=${{ github.workflow }}
#                 cache-to: type=gha, scope=${{ github.workflow }}
# 
#         # https://github.com/actions/upload-artifact
#         - name: "📂 docker artifacts"
#           uses: actions/upload-artifact@v3.1.3
#           with:
#                 name: docker
#                 path: /tmp/docker.tar
# 
#   build:
#     name: Build application
#     runs-on: ubuntu-latest
#     steps:
#         # https://github.com/actions/checkout
#         - name: "☁️ checkout repository"
#           uses: actions/checkout@v4.0.0
# 
#         # https://github.com/actions/setup-node
#         - name: "🔧 setup node"
#           uses: actions/setup-node@v3.8.1
#           with:
#                 node-version: 18
# 
#         - name: "🔧 install npm@latest"
#           run: npm i -g npm@latest
# 
#         # https://github.com/bahmutov/npm-install
#         - name: "📦 install dependencies"
#           uses: bahmutov/npm-install@v1.6.0
#           with:
#             working-directory: ./
# 
#         - name: "🚀 static app"
#           run: npm run build
# 
#         # https://github.com/actions/upload-artifact
#         - name: "📂 production artifacts"
#           uses: actions/upload-artifact@v3.1.3
#           with:
#                 name: build
#                 path: build
# 
#   release:
#     environment:
#         name: production
#         url: https://github.com/${{ github.repository }}/releases/tag/${{ env.RELEASE_TAG }}
#     name: Semantic release
#     needs:
#         - docker
#         - build
#     runs-on: ubuntu-latest
#     steps:
#         # https://github.com/actions/checkout
#         - name: "☁️ checkout repository"
#           uses: actions/checkout@v4.0.0
#           with:
#                 fetch-depth: 0
# 
#         # https://github.com/actions/download-artifact
#         - name: "📂 download docker artifacts"
#           uses: actions/download-artifact@v2
#           with:
#                 name: docker
#                 path: /tmp
# 
#         - name: "📦 load tag"
#           run: |
#                 docker load --input /tmp/docker.tar
#                 docker image ls -a
# 
#         # https://github.com/actions/upload-artifact
#         - name: "📂 download build artifacts"
#           uses: actions/download-artifact@3.1.3
#           with:
#                 name: build
#                 path: /tmp/build
# 
#         - name: "🚀 release"
#           id: semantic-release
#           uses: docker://ghcr.io/open-sauced/semantic-release-conventional-config:3.0.0
#           env:
#                 GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
# 
#   deploy:
#     name: Deploy to static
#     needs:
#         - build
#         - release
#     runs-on: ubuntu-latest
#     services:
#         docs:
#           image: ghcr.io/${{ github.repository }}:latest
#           ports:
#                 - 8080:80
#     steps:
#         # https://github.com/actions/checkout
#         - name: "☁️ checkout repository"
#           uses: actions/checkout@v4.0.0
# 
#         # https://github.com/actions/upload-artifact
#         - name: "📂 download artifacts"
#           uses: actions/download-artifact@3.1.3
#           with:
#                 name: build
#                 path: /home/runner/build
# 
#         - name: Install Prince
#           run: |
#                 curl https://www.princexml.com/download/prince-14.2-linux-generic-x86_64.tar.gz -O
#                 tar zxf prince-14.2-linux-generic-x86_64.tar.gz
#                 cd prince-14.2-linux-generic-x86_64
#                 yes "" | sudo ./install.sh
# 
#         # https://github.com/actions/setup-node
#         - name: "🔧 setup node"
#           uses: actions/setup-node@v3.8.1
#           with:
#                 node-version: 18
# 
#         - name: "🔧 install npm@latest"
#           run: npm i -g npm@latest
# 
#         # https://github.com/bahmutov/npm-install
#         - name: "📦 install dependencies"
#           uses: bahmutov/npm-install@v1.6.0
# 
#         - name: "📂 copy artifacts"
#           run: cp -R /home/runner/build .
# 
#         - name: "🚀 generate pdf"
#           run: npm run pdf
# 
#         # https://github.com/peaceiris/actions-gh-pages
#         - name: "🚀 deploy static"
#           uses: peaceiris/actions-gh-pages@v3.9.3
#           with:
#                 github_token: ${{ secrets.GITHUB_TOKEN }}
#                 publish_dir: ./public
#                 commit_message: ${{ github.event.head_commit.message }}
#                 enable_jekyll: false
#                 cname: creatorworkflowsnow.github.io
# 
#   cleanup:
#     name: Cleanup actions
#     needs:
#         - deploy
#     runs-on: ubuntu-latest
#     steps:
#         # https://github.com/geekyeggo/delete-artifact
#         - name: "♻️ remove build artifacts"
#           uses: geekyeggo/delete-artifact@v2.0.0
#           with:
#                 name: |
#                     build
#                     docker
# 